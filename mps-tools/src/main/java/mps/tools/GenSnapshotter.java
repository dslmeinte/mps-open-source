package mps.tools;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

import static java.util.Collections.emptyList;
import static mps.tools.ModuleUtil.*;
import static mps.tools.PathUtils.*;

/**
 * Main class utility to copy files generated by MPS' generation process to a given target path, preserving structure.
 * This is meant to make a snapshot of generations, to be able to compare generated files between versions of generators.
 * It copies all sources generated in solution directories in a given MPS project.
 * It doesn't copy MPS-own generation artifacts (such as files called 'checkpoints', and 'trace.info'),
 *  and also elides the sub path 'source_gen' at the target path.
 */
public class GenSnapshotter {

    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.println("GenSnapshotter: create a snapshot of generated source in MPS solutions");
            System.out.println();
            System.out.println("Usage: java -cp mpsTools.jar mps.tools.GenSnapshotter <projectDir> <targetDir> [<exclExt_1>...<exclExt_n>]");
            System.out.println("\t- projectDir is path to an MPS-project");
            System.out.println("\t- targetDir is path to/of target directory: should not exist!");
            System.out.println("\t- exclExt_1...exclExt_n are optional arguments with file extensions to be excluded");
            System.exit(2);
        }

        final var projectDir = Paths.get(args[0]);
        if (projectDir.toFile().isDirectory()) {
            if (!solutionDirIn(projectDir).toFile().isDirectory()) {
                System.err.printf("no directory 'solutions/' in path '%s'\n", projectDir);
                System.exit(1);
            }
        } else {
            System.err.printf("path '%s' is not a directory\n", projectDir);
            System.exit(1);
        }

        final var dstDir = Paths.get(args[1]);
        if (dstDir.toFile().isDirectory()) {
            System.err.printf("target dir '%s' already exists\n", dstDir);
            System.exit(1);
        }

        final List<String> exclusions = args.length > 2 ? Arrays.asList(args).subList(2, args.length) : emptyList();
        exclusions.sort(Comparator.naturalOrder());
        System.out.println(createSnapshot(projectDir, dstDir, exclusions) + " files copied");
    }

    private static long createSnapshot(Path projectDir, Path dstDir, List<String> exclusions) {
        final var solutionDir = solutionDirIn(projectDir);
        return generatedFiles(solutionDir)
                .filter(srcPath -> !exclusions.contains(extensionOf(srcPath)))
                .map(srcPath -> GenSnapshotter.copy(solutionDir, srcPath, dstDir))
                .filter(Boolean::booleanValue).count();
    }

    private static boolean copy(Path solutionDir, Path srcPath, Path dstDir) {
        try {
            final var shortenedSrcPath = pathFrom(
                    elements(solutionDir.relativize(srcPath)).filter(isSourceGen.negate())
            );
            final var dstPath = dstDir.resolve(shortenedSrcPath);
            final var parentDir = dstPath.getParent();
            if (!parentDir.toFile().isDirectory()) {
                Files.createDirectories(parentDir);
            }
            Files.copy(srcPath, dstPath);
            return true;
        } catch (IOException e) {
            System.err.println(String.format("couldn't copy '%s' into '%s'; due to:", srcPath, dstDir));
            e.printStackTrace();
            return false;
        }
    }

}
